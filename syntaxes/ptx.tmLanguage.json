{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "NVIDIA PTX Assembly",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#instructions"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#states"
		},
		{
			"include": "#datatypes"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#preprocessor"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "\/\/.*"
				},
				{
					"name": "comment.line.double-slash",
					"match": "\/\/.*"
				},
				{
					"name": "comment.block",
					"begin": "\/\\*",
					"end": "\\*\/",
					"beginCaptures": {
						"0": {
							"name": "comment.block.begin"
						}
					},
					"endCaptures": {
						"0": {
							"name": "comment.block.end"
						}
					},
					"patterns": [
						{
							"name": "comment.block.content",
							"match": "[^*]+|\\*(?!/)"
						}
					]
				}
			]
		},
		"instructions": {
			"patterns": [
				{
					"name": "ptx.instruction_set.instructions.control",
					"patterns": [
						{
							"name": "keyword.control",
							"match": "\\b(call|ret|exit|bra)\\b"
						},
						{
							"name": "keyword.control.predicted_exec",
							"match": "@!?[^ ]+"
						},
						{
							"name": "keyword.control.instruction_grouping",
							"match": "\\{[^}]*\\}"
						},
						{
							"name": "keyword.control.comparison_N_selection",
							"match": "\\b(set|setp|selp|slct)\\b"
						}
					]
				},
				{
					"name": "ptx.instruction_set.instructions.operators",
					"patterns": [
						{
							"name": "keyword.operator.integer_arithmetic",
							"match": "\\b(add|sub|mul|div|abs|neg|min|max|mad|sad|mul24|mad24|popc|clz|bfind|fns|brev|bfe|bfi|bmsk|szext|dp4a|dp2a|add.cc|sub.cc|mad.cc|addc|subc|mulc)\\b"
						},
						{
							"name": "keyword.operator.logical",
							"match": "\\b(and|or|xor|not|cnot|lop3)\\b"
						},
						{
							"name": "keyword.operator.shifts",
							"match": "\\b(shf|shl|shr)\\b"
						},
						{
							"name": "keyword.operator.float_arithmetic",
							"match": "\\b(testp|copysign|fma|rcp|sqrt|rsqrt|sin|cos|lg2|ex2|tanh)\\b"
						},
						{
							"name": "keyword.other.rounding_modifier",
							"match": "\\.\\b(rn|rz|rna|rm|rp|rs|rni|rzi|rmi|rpi)\\b"
						},
						{
							"name": "keyword.other.dereference",
							"match": "\\[\\%*[a-z|A-Z|0-9]+\\]"
						},
						{
							"name": "ptx.instruction_set.cache_operators",
							"patterns": [
								{
									"name": "markup.bold",
									"match": "\\.\\b(ca|cg|cs|lu|cv|wb|wt)\\b"
								},
								{
									"name": "keyword.control.less",
									"match": "\\b(evict_normal|evict_first|evict_last|evict_unchanged|no_allocate)\\b"
								}
							]
						}
					]
				},
				{
					"name": "ptx.instruction_set.instructions.data_control_instructions",
					"patterns": [
						{
							"name": "keyword.other.data_movement",
							"match": "\\b(mov|ld|ldu|st|st.async|st.bulk|prmt|shfl.sync)\\b"
						},
						{
							"name": "keyword.other.data_movement.multi_memory",
							"match": "\\b(multimem.ld_reduce|multimem.st|multimem.red)\\b"
						},
						{
							"name": "keyword.other.data_movement.cache_related",
							"match": "\\b(prefetch|prefetchu|applypriority|discard|createpolicy)\\b"
						},
						{
							"name": "keyword.operator.conversions",
							"match": "\\b(cvta|cvt|cvt.pack)\\b"
						},
						{
							"name": "keyword.other.data_movement.copy",
							"match": "\\b(cp.async|cp.async.commit_group|cp.async.wait_group|cp.async.wait_all|cp.async.bulk|cp.reduce.async.bulk|cp.async.bulk.prefetch|cp.async.bulk.tensor|cp.reduce.async.bulk.tensor|cp.async.bulk.prefetch.tensor|cp.async.bulk.commit_group|cp.async.bulk.wait_group)\\b"
						},
						{
							"name": "keyword.other.data_movement.extras",
							"match": "\\b(isspacep|mapa|tensormap.replace)\\b"
						}
					]
				},
				{
					"name": "ptx.instruction_set.texture_N_surface",
					"patterns": [
						{
							"name": "keyword.other.memory_tex",
							"match": "\\b(tex|tld4|txq)\\b"
						},
						{
							"name": "keyword.other.memory_surface",
							"match": "\\b(suld|sust|sured|suq)\\b"
						}
					]
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ptx",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ptx",
					"match": "\\\\."
				}
			]
		},
		"states": {
			"name": "ptx.cuda.states",
			"patterns": [
				{
					"name": "ptx.cuda.states.storage_locations",
					"patterns": [
						{
							"name": "storage.modifier",
							"match": "\\.\\b(global|param|reg|sreg|const|local|shared)\\b"
						},
						{
							"name": "invalid.deprecated",
							"match": "\\.\\b(tex)\\b"
						}
					]
				}
			]
		},
		"datatypes": {
			"name": "ptx.cuda.datatypes",
			"patterns": [
				{
					"name": "storage.type",
					"match": "\\.\\b(u8|s8|u16|s16|u32|s32|u64|s64)\\b"
				},
				{
					"name": "storage.type",
					"match": "\\.\\b(b8|b16|b32|b64|b128)\\b"
				},
				{
					"name": "storage.type",
					"match": "\\.\\b(ptr)\\b"
				},
				{
					"name": "storage.type",
					"match": "\\.\\b(f16|f32|f64)\\b"
				}
			]
		},
		"preprocessor": {
			"name": "ptx.keyword.preprocessor",
			"patterns": [
				{
					"name": "ptx.keyword.preprocessor.metadata",
					"patterns": [
						{
							"name": "markup.italic",
							"match": "\\.\\b(version|target|address_size)\\b"
						}
					]
				}
			]
		},
		"literals": {
			"name": "ptx.literals",
			"patterns": [
				{
					"name": "constant.language",
					"match": "(%tid|%ntid|%ctaid|%nctaid|%laneid|%warpid|%nwarpid|%gridid|%clusterid|%nclusterid|%cluster_ctaid|%cluster_nctaid|%cluster_ctarank|%cluster_nctarank|%is_explicit_cluster|%smid|%nsmid|%lanemask_eq|%lanemask_le|%lanemask_lt|%lanemask_ge|%lanemask_gt|%clock64|%clock|%clock_hi|%globaltimer|%globaltimer_lo|%globaltimer_hi|%total_smem_size|%aggr_smem_size|%dynamic_smem_size|%reserved_smem_offset_begin|%reserved_smem_offset_end|%reserved_smem_offset_cap|%current_graph_exec|%pm[0-7](?:_64)?|%envreg(?:[0-9]|[12][0-9]|3[1])|WARP_SZ)(?:\\.[xyz])?"
				},
				{
					"name": "constant.numeric",
					"match": "\\b[0-9]+\\b"
				}
			]
		}
	},
	"scopeName": "source.ptx"
}